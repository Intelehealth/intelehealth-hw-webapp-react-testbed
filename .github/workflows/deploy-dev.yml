name: üöÄ Deploy to Development

on:
  push:
    branches: [dev]
  workflow_dispatch:
  workflow_run:
    workflows: ['üîç Pull Request Checks']
    types: [completed]
    branches: [dev]

env:
  NODE_VERSION: '22.18.0'
  DEPLOY_ENV: 'development'

jobs:
  deploy-dev:
    name: Deploy to Development Server
    runs-on: ubuntu-latest
    environment: development
    # Only run if PR checks passed or if triggered manually
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: üì¶ Install dependencies
        run: yarn install --frozen-lockfile

      - name: üèóÔ∏è Build for development
        run: yarn build
        env:
          VITE_APP_ENV: development
          VITE_API_URL: ${{ secrets.DEV_API_URL }}

      - name: üìä Analyze bundle
        run: yarn analyze

      - name: üîê Setup SSH Key
        run: |
          echo "üîê Setting up SSH key for server access..."
          # Create .ssh directory
          mkdir -p ~/.ssh
          # Set proper permissions
          chmod 700 ~/.ssh
          # Write the private key to file
          echo "${{ secrets.DEV_SERVER_PEM_KEY }}" > ~/.ssh/dev_server.pem
          # Set proper permissions for the key file
          chmod 600 ~/.ssh/dev_server.pem
          # Add server to known hosts to avoid host key verification prompt
          ssh-keyscan -H ${{ secrets.DEV_SERVER_HOST }} >> ~/.ssh/known_hosts
          echo "‚úÖ SSH key setup completed!"

      - name: üß™ Test Server Connection
        run: |
          echo "üß™ Testing connection to development server..."
          ssh -i ~/.ssh/dev_server.pem -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "echo 'Connection successful!'"
          echo "‚úÖ Server connection test passed!"

      - name: üöÄ Deploy to Development Server
        run: |
          echo "üöÄ Deploying to development server..."

          # Create deployment directory on server
          ssh -i ~/.ssh/dev_server.pem -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "
            mkdir -p ${{ secrets.DEV_DEPLOY_PATH }}/backup
            mkdir -p ${{ secrets.DEV_DEPLOY_PATH }}/current
          "

          # Backup current deployment (if exists)
          ssh -i ~/.ssh/dev_server.pem -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "
            if [ -d '${{ secrets.DEV_DEPLOY_PATH }}/current' ] && [ \"\$(ls -A ${{ secrets.DEV_DEPLOY_PATH }}/current)\" ]; then
              echo 'üì¶ Creating backup of current deployment...'
              cp -r ${{ secrets.DEV_DEPLOY_PATH }}/current/* ${{ secrets.DEV_DEPLOY_PATH }}/backup/ 2>/dev/null || true
              echo '‚úÖ Backup created successfully!'
            else
              echo '‚ÑπÔ∏è No existing deployment to backup'
            fi
          "

          # Upload build files to server
          echo "üì§ Uploading build files to server..."
          rsync -avz --delete -e "ssh -i ~/.ssh/dev_server.pem -o StrictHostKeyChecking=no" \
            dist/ \
            ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }}:${{ secrets.DEV_DEPLOY_PATH }}/current/

          # Set proper permissions on server
          ssh -i ~/.ssh/dev_server.pem -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "
            echo 'üîß Setting proper permissions...'
            chmod -R 755 ${{ secrets.DEV_DEPLOY_PATH }}/current/
            chown -R ${{ secrets.DEV_SERVER_USER }}:${{ secrets.DEV_SERVER_USER }} ${{ secrets.DEV_DEPLOY_PATH }}/current/
            echo '‚úÖ Permissions set successfully!'
          "

          # Update web server configuration (if needed)
          ssh -i ~/.ssh/dev_server.pem -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "
            echo 'üåê Updating web server configuration...'
            # Add your web server restart commands here
            # Example for Nginx:
            # sudo systemctl reload nginx
            # Example for Apache:
            # sudo systemctl reload apache2
            echo '‚úÖ Web server configuration updated!'
          "

          echo "‚úÖ Development deployment completed successfully!"

      # - name: üß™ Post-Deployment Health Check
      #   run: |
      #     echo "üß™ Running post-deployment health checks..."
      #
      #     # Wait a moment for deployment to settle
      #     sleep 10
      #
      #     # Check if the application is responding
      #     HEALTH_CHECK_URL="${{ secrets.DEV_HEALTH_CHECK_URL }}"
      #     if [ -n "$HEALTH_CHECK_URL" ]; then
      #       echo "üîç Checking application health at: $HEALTH_CHECK_URL"
      #       HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_CHECK_URL" || echo "000")
      #
      #       if [ "$HTTP_STATUS" = "200" ]; then
      #         echo "‚úÖ Health check passed! Application is responding correctly."
      #       else
      #         echo "‚ö†Ô∏è Health check failed with status: $HTTP_STATUS"
      #         echo "üîç Checking server status..."
      #         ssh -i ~/.ssh/dev_server.pem -o StrictHostKeyChecking=no ${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }} "
      #           echo 'Server status:'
      #           ps aux | grep -E '(nginx|apache|node)' | grep -v grep || echo 'No web server processes found'
      #           echo 'Disk space:'
      #           df -h
      #           echo 'Recent logs:'
      #           tail -n 20 /var/log/nginx/error.log 2>/dev/null || echo 'No nginx error logs found'
      #         "
      #       fi
      #     else
      #       echo "‚ÑπÔ∏è No health check URL configured, skipping health check"
      #     fi
      #
      #     echo "‚úÖ Post-deployment health check completed!"

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          # Remove the private key file for security
          rm -f ~/.ssh/dev_server.pem
          echo "‚úÖ Cleanup completed!"

      - name: üìß Notify deployment to Slack
        if: always()
        run: |
          echo "üìß Sending deployment notification to Slack..."

          # Determine deployment status
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_COLOR="good"
            STATUS_TEXT="SUCCESS"
          else
            STATUS_EMOJI="‚ùå"
            STATUS_COLOR="danger"
            STATUS_TEXT="FAILED"
          fi

          # Prepare Slack message
          SLACK_MESSAGE=$(cat <<EOF
          {
            "channel": "${{ secrets.SLACK_CHANNEL }}",
            "username": "GitHub Actions",
            "icon_emoji": ":rocket:",
            "attachments": [
              {
                "color": "$STATUS_COLOR",
                "title": "$STATUS_EMOJI Development Deployment $STATUS_TEXT",
                "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                    "short": true
                  },
                  {
                    "title": "Author",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "Development",
                    "short": true
                  },
                  {
                    "title": "Deployment Time",
                    "value": "$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')",
                    "short": true
                  },
                  {
                    "title": "Server",
                    "value": "${{ secrets.DEV_SERVER_HOST }}",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )

          # Send notification to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "$SLACK_MESSAGE" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"

          echo "‚úÖ Slack notification sent successfully!"
